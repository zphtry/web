{
  "rules": {
    // () => { return x; } to () => x
    "arrow-return-shorthand": true,
    // ??
    "callable-types": true,
    // Enforces PascalCased class and interface names.
    "class-name": true,
    // space after comment double slash
    "comment-format": [
      true,
      "check-space"
    ],
    // Enforces braces for if/for/do/while statements.
    "curly": true,
    // ??
    "deprecation": {
      "severity": "warn"
    },
    // Ensures the file ends with a newline.
    "eofline": true,
    // Requires a for ... in statement to be filtered with an if statement. Почему?
    "forin": true,
    // Disallows importing the specified modules directly via import and require. Instead only sub modules may be imported from that module.
    "import-blacklist": [
      true,
      "rxjs",
      "rxjs/Rx"
    ],
    // Ensures proper spacing between import statement keywords
    "import-spacing": true,
    // Enforces indentation with tabs or spaces.
    "indent": [
      true,
      "spaces"
    ],
    // Prefer an interface declaration over a type literal (type T = { ... })
    "interface-over-type-literal": true,
    // This rule only allows labels to be on do/for/while/switch statements.
    "label-position": true,
    // Obviously
    "max-line-length": [
      true,
      140
    ],
    // Requires explicit visibility declarations for class members.
    "member-access": false,
    // A consistent ordering for class members can make classes easier to read, navigate, and edit.
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    // Disallows use of arguments.callee.
    "no-arg": true,
    // Disallows bitwise operators.
    "no-bitwise": true,
    // Bans the use of specified console methods.
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    // Disallows access to the constructors of String, Number, and Boolean.
    "no-construct": true,
    // In general, debugger statements aren’t appropriate for production code.
    "no-debugger": true,
    // Warns if ‘super()’ appears twice in a constructor.
    "no-duplicate-super": true,
    // Disallows empty blocks. Blocks with a comment inside are not considered empty.
    "no-empty": false,
    // Forbids empty interfaces.
    "no-empty-interface": true,
    // Disallows eval function invocations.
    "no-eval": true,
    // Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    // Warns on apparent attempts to define constructors for interfaces or new for classes.
    "no-misused-new": true,
    // Disallows non-null assertions using the ! postfix operator.
    "no-non-null-assertion": true,
    // Disallows shadowing variable declarations.
    "no-shadowed-variable": {
      "severity": "warning"
    },
    // Forbids unnecessary string literal property access. Allows obj["prop-erty"] (can’t be a regular property access).
    // Disallows obj["property"] (should be obj.property).
    "no-string-literal": false,
    // Flags throwing plain strings or concatenations of strings because only Errors produce proper stack traces.
    "no-string-throw": true,
    // Disallows falling through case statements.
    "no-switch-case-fall-through": true,
    // Disallows trailing whitespace at the end of a line.
    "no-trailing-whitespace": true,
    // Forbids a ‘var’/’let’ statement or destructuring initializer to be initialized to ‘undefined’.
    "no-unnecessary-initializer": true,
    // Unused expressions are expression statements which are not assignments or function calls (and thus usually no-ops).
    "no-unused-expression": true,
    // Disallows usage of variables before their declaration.
    "no-use-before-declare": true,
    // Disallows usage of the var keyword.
    "no-var-keyword": true,
    // When using the default alphabetical ordering, additional blank lines may be used to group object properties together
    // while keeping the elements within each group in alphabetical order.
    "object-literal-sort-keys": false,
    // Requires the specified tokens to be on the same line as the expression preceding them.
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    // Requires that variable declarations use const instead of let and var if possible.
    "prefer-const": true,
    // Requires single or double quotes for string literals.
    "quotemark": [
      true,
      "single"
    ],
    // Requires the radix parameter to be specified when calling parseInt.
    "radix": true,
    // Enforces consistent semicolon usage at the end of every statement.
    "semicolon": [
      true,
      "always"
    ],
    // Requires === and !== in place of == and !=.
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    // Requires or disallows whitespace for type definitions.
    // Determines if a space is required or not before the colon in a type specifier.
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    // Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.
    "unified-signatures": true,
    // Checks variable names for various errors.
    "variable-name": false,
    // Enforces whitespace style conventions.
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ]
  }
}
